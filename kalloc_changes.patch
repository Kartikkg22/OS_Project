diff --git a/original/kalloc.c b/project/kalloc.c
index 14cd4f4..de4de66 100644
--- a/original/kalloc.c
+++ b/project/kalloc.c
@@ -1,13 +1,18 @@
 // Physical memory allocator, intended to allocate
 // memory for user processes, kernel stacks, page table pages,
 // and pipe buffers. Allocates 4096-byte pages.
-
 #include "types.h"
 #include "defs.h"
 #include "param.h"
 #include "memlayout.h"
 #include "mmu.h"
-#include "spinlock.h"
+#include "kalloc.h"
+
+// Initialization happens in two phases.
+// 1. main() calls kinit1() while still using entrypgdir to place just
+// the pages mapped by entrypgdir on free list.
+// 2. main() calls kinit2() with the rest of the physical pages
+// after installing a full page table that maps them on all cores.
 
 void freerange(void *vstart, void *vend);
 extern char end[]; // first address after kernel loaded from ELF file
@@ -16,18 +21,25 @@ extern char end[]; // first address after kernel loaded from ELF file
 struct run {
   struct run *next;
 };
+struct kmem kmem;
+int kref[PHYSTOP / PGSIZE];
 
-struct {
-  struct spinlock lock;
-  int use_lock;
-  struct run *freelist;
-} kmem;
+void incref(char *pa) {
+  acquire(&kmem.lock);
+  kmem.refcount[V2P(pa) / PGSIZE]++;  // Increase ref count
+  release(&kmem.lock);
+}
+
+void decref(char *pa) {
+  acquire(&kmem.lock);
+  int ref = --kmem.refcount[V2P(pa) / PGSIZE]; // Decrease ref count
+  release(&kmem.lock);
+  
+  if (ref == 0) {
+    kfree(pa);  // Free memory when refcount reaches 0
+  }
+}
 
-// Initialization happens in two phases.
-// 1. main() calls kinit1() while still using entrypgdir to place just
-// the pages mapped by entrypgdir on free list.
-// 2. main() calls kinit2() with the rest of the physical pages
-// after installing a full page table that maps them on all cores.
 void
 kinit1(void *vstart, void *vend)
 {
@@ -91,6 +103,12 @@ kalloc(void)
     kmem.freelist = r->next;
   if(kmem.use_lock)
     release(&kmem.lock);
+  if (r) {
+    memset((char*)r, 0, PGSIZE);
+    acquire(&kmem.lock);
+    kmem.refcount[V2P((char*)r) / PGSIZE] = 1;  // Initialize refcount to 1
+    release(&kmem.lock);
+  }  
   return (char*)r;
 }
 
